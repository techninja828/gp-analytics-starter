name: Deploy Streamlit â†’ ECS (Athena)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: streamlit-athena
  ECS_CLUSTER: gp-analytics
  ECS_SERVICE: streamlit
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::444198539914:role/GitHubOIDCDeployRole   # <- your role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${ECR_REPOSITORY}:${IMAGE_TAG} -t $ECR_REGISTRY/${ECR_REPOSITORY}:latest .
          docker push $ECR_REGISTRY/${ECR_REPOSITORY}:${IMAGE_TAG}
          docker push $ECR_REGISTRY/${ECR_REPOSITORY}:latest

      - name: Render task definition (set new image)
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: infra/ecs/taskdef.json
          container-name: streamlit
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-service@v1
        with:
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          task-definition: ${{ steps.render.outputs.task-definition }}
          wait-for-service-stability: true
